<!-- views/quotes.ejs -->
<style>
  #body {
    height: calc(100vh - 4rem); /* Adjust based on your header and padding needs */
    overflow-y: auto;
  }
</style>

<div id="body" class="container mx-auto p-4 h-[calc(100vh-4rem)] overflow-y-auto">
  <div class="flex justify-between items-center mb-4">
    <h1 class="text-2xl font-bold">Quotes</h1>
    <% if (user) { %>
      <a href="#" hx-get="/addquote" hx-target="#body" class="bg-orange-600 text-white px-4 py-2 rounded-md hover:bg-orange-700">
        Add Quote
      </a>
    <% } %>
  </div>
  <div class="quote-form mx-auto mt-8 p-4 max-w-4xl bg-white rounded-lg shadow-lg">
    <div class="filter-section flex mb-4 items-center space-x-2">
        <select id="filterType" class="pl-3 pr-4 py-2 border border-gray-300 rounded-lg bg-white text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <option value="">Select Filter Type</option>
            <option value="author">Author</option>
            <option value="quote">Quote</option>
            <option value="tags">Tags</option>
        </select>
        <div class="relative flex-1">
            <input type="text" id="searchBar" placeholder="" class="w-full pl-4 pr-12 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
            <button id="searchButton" class="absolute inset-y-0 right-0 flex items-center justify-center w-12 h-12 bg-orange-500 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-600">
                <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 1116.65 4.35a7.5 7.5 0 010 12.3z" />
                </svg>
            </button>
        </div>
    </div>
    <div id="quotesContainer" class="space-y-4">
      <!-- Quotes will be dynamically added here -->
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const quotesContainer = document.getElementById('quotesContainer');
    const searchBar = document.getElementById('searchBar');
    const filterType = document.getElementById('filterType');
    const searchButton = document.getElementById('searchButton');

    function displayQuotes(quotes) {
      quotesContainer.innerHTML = '';
      quotes.forEach(quote => {
        const quoteItem = document.createElement('div');
        quoteItem.className = 'quote-item bg-gray-100 p-4 mb-2 rounded border border-gray-200 flex justify-between items-center';
        quoteItem.innerHTML = `
          <p class="text flex-1">${quote.text}</p>
          <p class="author font-bold ml-4 flex-shrink-0">${quote.author}</p>
          ${quote.addedByUser ? '<div class="user-icon" style="background: url(\'path_to_your_icon.png\') no-repeat center center; width: 24px; height: 24px;"></div>' : ''}
        `;
        quotesContainer.appendChild(quoteItem);
      });
    }

    function filterQuotes() {
      const searchValue = searchBar.value;
      const filter = filterType.value;

      fetch(`/search?filter=${filter}&search=${searchValue}`)
        .then(response => response.json())
        .then(data => {
          if (!Array.isArray(data)) {
            throw new Error('Invalid response format');
          }
          displayQuotes(data);
        })
        .catch(error => {
          console.error('Error fetching quotes:', error);
          quotesContainer.innerHTML = '<p class="text-red-500">Error fetching quotes. Please try again later.</p>';
        });
    }

    searchBar.addEventListener('input', filterQuotes);
    filterType.addEventListener('change', filterQuotes);
    searchButton.addEventListener('click', filterQuotes);

    // Initial display of quotes
    filterQuotes();
  });
</script>
